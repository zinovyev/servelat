<?php


namespace Servelat\Tools\Commands;


use Servelat\ServerApplication;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class ServelatServerStartCommand.
 * Start the servelat server.
 *
 * @author Ivan Zinovyev <vanyazin@gmail.com>
 */
class ServelatServerStartCommand extends Command
{
    /**
     * Configures the current command.
     */
    protected function configure()
    {
        $this
            ->setName('servelat-server:start')
            ->setAliases(['servelat-server:start'])
            ->setDescription('Start servelat server instance command.')
            ->setDefinition([
                // TODO
            ])
        ;
    }

    /**
     * Executes the current command.
     *
     * This method is not abstract because you can use this class
     * as a concrete class. In this case, instead of defining the
     * execute() method, you set the code to execute by passing
     * a Closure to the setCode() method.
     *
     * @param InputInterface $input An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     *
     * @return null|int null or 0 if everything went fine, or an error code
     *
     * @throws \LogicException When this abstract method is not implemented
     *
     * @see setCode()
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $app = new ServerApplication();
        $app->getContainer()['daemonizer.daemonizer']->daemonize();
//        $output->writeln('Run server...');
        // TODO: Change the autogenerated stub
    }
}